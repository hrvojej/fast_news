"""Initial migration

Revision ID: 2a1b33fd5a20
Revises: 
Create Date: 2025-02-02 12:16:03.801870

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2a1b33fd5a20'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('content_statistics',
    sa.Column('stat_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('source_type', sa.String(length=50), nullable=False),
    sa.Column('source_id', sa.Text(), nullable=False),
    sa.Column('time_bucket', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('word_count', sa.Integer(), nullable=True),
    sa.Column('view_count', sa.Integer(), nullable=True),
    sa.Column('completion_rate', sa.Float(), nullable=True),
    sa.Column('keyword_density', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('stat_id'),
    sa.UniqueConstraint('source_type', 'source_id', 'time_bucket', name='uq_content_statistics'),
    schema='analysis'
    )
    op.create_index('idx_stats_source', 'content_statistics', ['source_type', 'source_id'], unique=False, schema='analysis')
    op.create_index('idx_stats_temporal', 'content_statistics', ['time_bucket'], unique=False, schema='analysis')
    op.create_table('sentiment_lexicon',
    sa.Column('word_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('word', sa.String(length=255), nullable=False),
    sa.Column('language_code', sa.String(length=10), server_default=sa.text("'en'"), nullable=False),
    sa.Column('base_score', sa.Float(), nullable=False),
    sa.PrimaryKeyConstraint('word_id'),
    sa.UniqueConstraint('word', name='uq_sentiment_lexicon_word'),
    schema='analysis'
    )
    op.create_index('idx_lexicon_language', 'sentiment_lexicon', ['language_code'], unique=False, schema='analysis')
    op.create_index('idx_lexicon_score', 'sentiment_lexicon', ['base_score'], unique=False, schema='analysis')
    op.create_index('idx_lexicon_word', 'sentiment_lexicon', ['word'], unique=False, schema='analysis')
    op.create_table('entities',
    sa.Column('entity_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('normalized_name', sa.String(length=255), nullable=False),
    sa.Column('entity_type', sa.String(length=50), nullable=False),
    sa.Column('status', sa.String(length=50), server_default=sa.text("'active'"), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('aliases', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('importance_score', sa.Float(), nullable=True),
    sa.Column('sentiment_score', sa.Float(), nullable=True),
    sa.Column('mention_count', sa.Integer(), server_default=sa.text('0'), nullable=True),
    sa.Column('first_seen_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('last_seen_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('search_vector', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('entity_id'),
    sa.UniqueConstraint('normalized_name', 'entity_type', name='uq_entities_normalized_name_type'),
    schema='entities'
    )
    op.create_index('idx_entities_normalized_name', 'entities', ['normalized_name'], unique=False, schema='entities')
    op.create_index('idx_entities_status', 'entities', ['status'], unique=False, schema='entities')
    op.create_index('idx_entities_temporal', 'entities', ['last_seen_at'], unique=False, schema='entities')
    op.create_index('idx_entities_type', 'entities', ['entity_type'], unique=False, schema='entities')
    op.create_table('events',
    sa.Column('event_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('end_time', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('event_type', sa.String(length=50), nullable=False),
    sa.Column('importance_level', sa.Integer(), nullable=True),
    sa.Column('geographic_scope', sa.String(length=50), nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('sentiment_score', sa.Float(), nullable=True),
    sa.Column('status', sa.String(length=50), server_default=sa.text("'active'"), nullable=False),
    sa.Column('parent_event_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['parent_event_id'], ['events.events.event_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('event_id'),
    schema='events'
    )
    op.create_index('idx_events_status', 'events', ['status'], unique=False, schema='events')
    op.create_index('idx_events_temporal', 'events', ['start_time', 'end_time'], unique=False, schema='events')
    op.create_index('idx_events_type', 'events', ['event_type'], unique=False, schema='events')
    op.create_table('news_portals',
    sa.Column('portal_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('portal_prefix', sa.String(length=50), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('base_url', sa.Text(), nullable=False),
    sa.Column('rss_url', sa.Text(), nullable=True),
    sa.Column('scraping_enabled', sa.Boolean(), server_default=sa.text('true'), nullable=True),
    sa.Column('portal_language', sa.String(length=50), nullable=True),
    sa.Column('timezone', sa.String(length=50), server_default=sa.text("'UTC'"), nullable=True),
    sa.Column('active_status', sa.Boolean(), server_default=sa.text('true'), nullable=True),
    sa.Column('scraping_frequency_minutes', sa.Integer(), server_default=sa.text('60'), nullable=True),
    sa.Column('last_scraped_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('portal_id'),
    sa.UniqueConstraint('portal_prefix'),
    schema='public'
    )
    op.create_index('idx_portal_prefix', 'news_portals', ['portal_prefix'], unique=False, schema='public')
    op.create_index('idx_portal_status', 'news_portals', ['active_status'], unique=False, schema='public')
    op.create_table('platforms',
    sa.Column('platform_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('enabled', sa.Boolean(), server_default=sa.text('true'), nullable=True),
    sa.Column('api_version', sa.String(length=50), nullable=True),
    sa.Column('rate_limits', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('auth_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('platform_id'),
    sa.UniqueConstraint('name'),
    schema='social'
    )
    op.create_table('topic_categories',
    sa.Column('category_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('slug', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('display_order', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=50), server_default=sa.text("'active'"), nullable=False),
    sa.PrimaryKeyConstraint('category_id'),
    sa.UniqueConstraint('slug'),
    schema='topics'
    )
    op.create_table('content_analysis',
    sa.Column('content_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('source_type', sa.String(length=50), nullable=False),
    sa.Column('source_id', sa.Text(), nullable=False),
    sa.Column('portal_id', sa.UUID(), nullable=True),
    sa.Column('content_length', sa.Integer(), nullable=True),
    sa.Column('language_code', sa.String(length=10), nullable=True),
    sa.Column('readability_score', sa.Float(), nullable=True),
    sa.Column('overall_sentiment_score', sa.Float(), nullable=True),
    sa.Column('extracted_keywords', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('main_topics', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('named_entities', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('analyzed_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.ForeignKeyConstraint(['portal_id'], ['public.news_portals.portal_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('content_id'),
    sa.UniqueConstraint('source_type', 'source_id', name='uq_content_analysis_source'),
    schema='analysis'
    )
    op.create_index('idx_content_sentiment', 'content_analysis', ['overall_sentiment_score'], unique=False, schema='analysis')
    op.create_index('idx_content_source', 'content_analysis', ['source_type', 'source_id'], unique=False, schema='analysis')
    op.create_index('idx_content_temporal', 'content_analysis', ['analyzed_at'], unique=False, schema='analysis')
    op.create_table('article_comment_stats',
    sa.Column('article_id', sa.UUID(), nullable=False),
    sa.Column('portal_id', sa.UUID(), nullable=False),
    sa.Column('total_comments_count', sa.Integer(), server_default=sa.text('0'), nullable=True),
    sa.Column('top_level_comments_count', sa.Integer(), server_default=sa.text('0'), nullable=True),
    sa.Column('reply_comments_count', sa.Integer(), server_default=sa.text('0'), nullable=True),
    sa.Column('total_likes_count', sa.Integer(), server_default=sa.text('0'), nullable=True),
    sa.Column('overall_sentiment_score', sa.Float(), nullable=True),
    sa.Column('last_comment_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['portal_id'], ['public.news_portals.portal_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('article_id', 'portal_id'),
    schema='comments'
    )
    op.create_table('comments',
    sa.Column('comment_id', sa.Text(), nullable=False),
    sa.Column('article_id', sa.UUID(), nullable=False),
    sa.Column('portal_id', sa.UUID(), nullable=True),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('content_html', sa.Text(), nullable=True),
    sa.Column('author_id', sa.Text(), nullable=True),
    sa.Column('author_name', sa.Text(), nullable=True),
    sa.Column('parent_comment_id', sa.Text(), nullable=True),
    sa.Column('root_comment_id', sa.Text(), nullable=True),
    sa.Column('reply_level', sa.Integer(), server_default=sa.text('0'), nullable=True),
    sa.Column('thread_path', sa.Text(), nullable=True),
    sa.Column('likes_count', sa.Integer(), server_default=sa.text('0'), nullable=True),
    sa.Column('replies_count', sa.Integer(), server_default=sa.text('0'), nullable=True),
    sa.Column('sentiment_score', sa.Float(), nullable=True),
    sa.Column('is_spam', sa.Boolean(), server_default=sa.text('false'), nullable=True),
    sa.Column('posted_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['parent_comment_id'], ['comments.comments.comment_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['portal_id'], ['public.news_portals.portal_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('comment_id'),
    schema='comments'
    )
    op.create_index('idx_comments_article', 'comments', ['article_id', 'portal_id'], unique=False, schema='comments')
    op.create_index('idx_comments_author', 'comments', ['author_id'], unique=False, schema='comments')
    op.create_index('idx_comments_hierarchy', 'comments', ['parent_comment_id', 'root_comment_id'], unique=False, schema='comments')
    op.create_index('idx_comments_path', 'comments', ['thread_path'], unique=False, schema='comments', postgresql_using='btree')
    op.create_index('idx_comments_temporal', 'comments', ['posted_at'], unique=False, schema='comments')
    op.create_table('entity_mentions',
    sa.Column('mention_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('entity_id', sa.Integer(), nullable=False),
    sa.Column('content_type', sa.String(length=50), nullable=False),
    sa.Column('content_id', sa.Text(), nullable=False),
    sa.Column('portal_id', sa.UUID(), nullable=True),
    sa.Column('context_snippet', sa.Text(), nullable=True),
    sa.Column('sentiment_score', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['entity_id'], ['entities.entities.entity_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['portal_id'], ['public.news_portals.portal_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('mention_id'),
    sa.UniqueConstraint('entity_id', 'content_type', 'content_id', name='uq_entity_mentions'),
    schema='entities'
    )
    op.create_index('idx_entity_mentions_content', 'entity_mentions', ['content_type', 'content_id'], unique=False, schema='entities')
    op.create_table('entity_relationships',
    sa.Column('source_entity_id', sa.Integer(), nullable=False),
    sa.Column('target_entity_id', sa.Integer(), nullable=False),
    sa.Column('relationship_type', sa.String(length=50), nullable=False),
    sa.Column('strength', sa.Float(), nullable=True),
    sa.CheckConstraint('source_entity_id <> target_entity_id', name='chk_no_self_relationship'),
    sa.ForeignKeyConstraint(['source_entity_id'], ['entities.entities.entity_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['target_entity_id'], ['entities.entities.entity_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('source_entity_id', 'target_entity_id', 'relationship_type'),
    schema='entities'
    )
    op.create_index('idx_entity_relationships_type', 'entity_relationships', ['relationship_type'], unique=False, schema='entities')
    op.create_table('event_articles',
    sa.Column('event_id', sa.UUID(), nullable=False),
    sa.Column('article_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('portal_id', sa.UUID(), nullable=False),
    sa.Column('similarity_score', sa.Float(), nullable=True),
    sa.Column('context_summary', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.events.event_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['portal_id'], ['public.news_portals.portal_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('event_id', 'article_id', 'portal_id'),
    schema='events'
    )
    op.create_table('timeline_entries',
    sa.Column('entry_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('event_id', sa.UUID(), nullable=True),
    sa.Column('article_id', sa.UUID(), nullable=False),
    sa.Column('portal_id', sa.UUID(), nullable=True),
    sa.Column('entry_timestamp', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('entry_type', sa.String(length=50), nullable=False),
    sa.Column('summary', sa.Text(), nullable=False),
    sa.Column('impact_level', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.events.event_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['portal_id'], ['public.news_portals.portal_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('entry_id', 'entry_timestamp'),
    schema='events'
    )
    op.create_index('idx_timeline_event', 'timeline_entries', ['event_id'], unique=False, schema='events')
    op.create_table('article_social_metrics',
    sa.Column('article_id', sa.UUID(), nullable=False),
    sa.Column('portal_id', sa.UUID(), nullable=False),
    sa.Column('platform_id', sa.Integer(), nullable=False),
    sa.Column('total_posts_count', sa.Integer(), server_default=sa.text('0'), nullable=True),
    sa.Column('total_likes_count', sa.Integer(), server_default=sa.text('0'), nullable=True),
    sa.Column('total_shares_count', sa.Integer(), server_default=sa.text('0'), nullable=True),
    sa.Column('total_replies_count', sa.Integer(), server_default=sa.text('0'), nullable=True),
    sa.Column('overall_sentiment_score', sa.Float(), nullable=True),
    sa.Column('first_posted_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('last_activity_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['platform_id'], ['social.platforms.platform_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['portal_id'], ['public.news_portals.portal_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('article_id', 'portal_id', 'platform_id'),
    schema='social'
    )
    op.create_index('idx_metrics_temporal', 'article_social_metrics', ['last_activity_at'], unique=False, schema='social')
    op.create_table('posts',
    sa.Column('post_id', sa.Text(), nullable=False),
    sa.Column('platform_id', sa.Integer(), nullable=True),
    sa.Column('article_id', sa.UUID(), nullable=False),
    sa.Column('portal_id', sa.UUID(), nullable=True),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('content_type', sa.String(length=50), nullable=True),
    sa.Column('language_code', sa.String(length=10), nullable=True),
    sa.Column('urls', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('author_platform_id', sa.Text(), nullable=True),
    sa.Column('author_username', sa.Text(), nullable=True),
    sa.Column('likes_count', sa.Integer(), server_default=sa.text('0'), nullable=True),
    sa.Column('shares_count', sa.Integer(), server_default=sa.text('0'), nullable=True),
    sa.Column('replies_count', sa.Integer(), server_default=sa.text('0'), nullable=True),
    sa.Column('sentiment_score', sa.Float(), nullable=True),
    sa.Column('posted_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['platform_id'], ['social.platforms.platform_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['portal_id'], ['public.news_portals.portal_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('post_id'),
    schema='social'
    )
    op.create_index('idx_posts_article', 'posts', ['article_id', 'portal_id'], unique=False, schema='social')
    op.create_index('idx_posts_author', 'posts', ['author_platform_id'], unique=False, schema='social')
    op.create_index('idx_posts_platform', 'posts', ['platform_id', 'posted_at'], unique=False, schema='social')
    op.create_index('idx_posts_temporal', 'posts', ['posted_at'], unique=False, schema='social')
    op.create_table('topics',
    sa.Column('topic_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('category_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('slug', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('parent_topic_id', sa.Integer(), nullable=True),
    sa.Column('path', sa.Text(), nullable=False),
    sa.Column('level', sa.Integer(), nullable=False),
    sa.Column('keywords', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('importance_score', sa.Float(), nullable=True),
    sa.Column('article_count', sa.Integer(), server_default=sa.text('0'), nullable=True),
    sa.Column('status', sa.String(length=50), server_default=sa.text("'active'"), nullable=False),
    sa.CheckConstraint('((parent_topic_id IS NULL AND level = 1) OR (parent_topic_id IS NOT NULL AND level > 1))', name='valid_hierarchy'),
    sa.ForeignKeyConstraint(['category_id'], ['topics.topic_categories.category_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_topic_id'], ['topics.topics.topic_id'], ),
    sa.PrimaryKeyConstraint('topic_id'),
    sa.UniqueConstraint('slug', 'path', name='uq_topics_slug_path'),
    schema='topics'
    )
    op.create_table('topic_content',
    sa.Column('topic_id', sa.Integer(), nullable=False),
    sa.Column('content_type', sa.String(length=50), nullable=False),
    sa.Column('content_id', sa.Text(), nullable=False),
    sa.Column('portal_id', sa.UUID(), nullable=True),
    sa.Column('relevance_score', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['portal_id'], ['public.news_portals.portal_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['topic_id'], ['topics.topics.topic_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('topic_id', 'content_id'),
    sa.UniqueConstraint('topic_id', 'content_type', 'content_id', name='uq_topic_content'),
    schema='topics'
    )
    op.create_index('idx_topic_content_relevance', 'topic_content', ['relevance_score'], unique=False, schema='topics')
    op.create_index('idx_topic_content_type', 'topic_content', ['content_type'], unique=False, schema='topics')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_topic_content_type', table_name='topic_content', schema='topics')
    op.drop_index('idx_topic_content_relevance', table_name='topic_content', schema='topics')
    op.drop_table('topic_content', schema='topics')
    op.drop_table('topics', schema='topics')
    op.drop_index('idx_posts_temporal', table_name='posts', schema='social')
    op.drop_index('idx_posts_platform', table_name='posts', schema='social')
    op.drop_index('idx_posts_author', table_name='posts', schema='social')
    op.drop_index('idx_posts_article', table_name='posts', schema='social')
    op.drop_table('posts', schema='social')
    op.drop_index('idx_metrics_temporal', table_name='article_social_metrics', schema='social')
    op.drop_table('article_social_metrics', schema='social')
    op.drop_index('idx_timeline_event', table_name='timeline_entries', schema='events')
    op.drop_table('timeline_entries', schema='events')
    op.drop_table('event_articles', schema='events')
    op.drop_index('idx_entity_relationships_type', table_name='entity_relationships', schema='entities')
    op.drop_table('entity_relationships', schema='entities')
    op.drop_index('idx_entity_mentions_content', table_name='entity_mentions', schema='entities')
    op.drop_table('entity_mentions', schema='entities')
    op.drop_index('idx_comments_temporal', table_name='comments', schema='comments')
    op.drop_index('idx_comments_path', table_name='comments', schema='comments', postgresql_using='btree')
    op.drop_index('idx_comments_hierarchy', table_name='comments', schema='comments')
    op.drop_index('idx_comments_author', table_name='comments', schema='comments')
    op.drop_index('idx_comments_article', table_name='comments', schema='comments')
    op.drop_table('comments', schema='comments')
    op.drop_table('article_comment_stats', schema='comments')
    op.drop_index('idx_content_temporal', table_name='content_analysis', schema='analysis')
    op.drop_index('idx_content_source', table_name='content_analysis', schema='analysis')
    op.drop_index('idx_content_sentiment', table_name='content_analysis', schema='analysis')
    op.drop_table('content_analysis', schema='analysis')
    op.drop_table('topic_categories', schema='topics')
    op.drop_table('platforms', schema='social')
    op.drop_index('idx_portal_status', table_name='news_portals', schema='public')
    op.drop_index('idx_portal_prefix', table_name='news_portals', schema='public')
    op.drop_table('news_portals', schema='public')
    op.drop_index('idx_events_type', table_name='events', schema='events')
    op.drop_index('idx_events_temporal', table_name='events', schema='events')
    op.drop_index('idx_events_status', table_name='events', schema='events')
    op.drop_table('events', schema='events')
    op.drop_index('idx_entities_type', table_name='entities', schema='entities')
    op.drop_index('idx_entities_temporal', table_name='entities', schema='entities')
    op.drop_index('idx_entities_status', table_name='entities', schema='entities')
    op.drop_index('idx_entities_normalized_name', table_name='entities', schema='entities')
    op.drop_table('entities', schema='entities')
    op.drop_index('idx_lexicon_word', table_name='sentiment_lexicon', schema='analysis')
    op.drop_index('idx_lexicon_score', table_name='sentiment_lexicon', schema='analysis')
    op.drop_index('idx_lexicon_language', table_name='sentiment_lexicon', schema='analysis')
    op.drop_table('sentiment_lexicon', schema='analysis')
    op.drop_index('idx_stats_temporal', table_name='content_statistics', schema='analysis')
    op.drop_index('idx_stats_source', table_name='content_statistics', schema='analysis')
    op.drop_table('content_statistics', schema='analysis')
    # ### end Alembic commands ###
